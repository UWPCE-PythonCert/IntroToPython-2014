Note on homework: Session 3

Mailroom:

For an interactive prompt, you can do a recursive call to a function that prints the prompt. But that's going to create a large stack for no good reason -- and it could theoretically overflow for a long-running program...

Better to use a while loop -- something like:

while True:
    ans = input("a prompt")
    if ans == 'something':
        ...do_something_with_ans...
    ....
    elif ans == 'quit':
        break


A number of folks used a data structure like:

donors = [ ["a_name", 400, 500], ["another_name", 200, 300], ...]

But remember that you can arbitrarily nest objects, so you can keep a list of donations on its own, separate from the name. and use a tupel for each donor -- kind of a little record:

donors = [ ("a_name", [400, 500]), ("another_name", [200, 300]), ...]


Hints for Session4:

File lab:

"".strip() is your friend

you don't need to check for somethign before calling replace():

if ',' in name:
    name = name.replace(',','')

You can just do name.replace(',','') and it will be a no-op if it's not there.

If you have a lot to replace, you can make a translation table.

In the collections module, there is a special object called a "counter", whic is a dict for counting objects:

from In [61]: from collections import Counter

In [62]: c = Counter()

In [63]: c['this'] += 1

In [64]: c['that'] += 1

In [65]: c['this'] += 1

In [66]: c
Out[66]: Counter({'that': 1, 'this': 2})

Other nifty stuff in the collections module:

https://docs.python.org/3/library/collections.html#module-collections

(DefaultDict could be handy for trigrams..)

reading all the lines in a text file:

for line in the_file:
    do_something_with(line)
    ....

Trigrams hints:
----------------

dict.setdefault() is handy.

You can use a tuple of strings: ('this', 'that') as a key in a dict.


PEP 8!!