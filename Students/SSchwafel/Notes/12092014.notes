Notes - 12/9/2014
====================

Unicode and the Persistence of Serialization
---  

   Projects Due at the end of this week! - Friday

Anything is bytes <-- if it's stored on a disk or sent over a network, it's bytes

Unicode makes it easier to deal with bytes

Used to be able to fit everything into a two byte integer, (65,536 chars.) 

Variety of encodings -> way of going between the canonical name of a character, and how it's stored in memory

Py2 strings are a sequence of bytes - Unicode strings are sequences of platonic characters

Platonic characters cannot be written to disk or network 


Python has both str and unicode

Two ways to work with binary data:

str and bytes() and bytearray

In Python 3 bytes and strings are completely different!

Unicode object lets you work with characters - all the same methods as the string object
    
    Encoding is converting from unicode object to bytes

    Decoding is converting from bytes to a unicode object

    
import codects
#encoding and decoding stuff

codecs.encode()
codecs.decode()
codecs.open() #better to use io.open

Use Unicode in  your source files - 

    #-*- coding: utf-8 -*-

The Trick in Using Unicode - Be Consistent:

    Always unicode, never Python strings

    Do the decoding when you input your data

        Decode on input
        
        Encode on output

    
        get default encoding - sys.getdefaultencoding()


from __future__ import unicode_literals #<----after running this line u'' is assumed!

    -be aware that you can still get Python 2 strings from other places...

JSON Requires UTF-8!

In Python 3, all strings are unicode

Py3 has two distinct concepts: 

    text - uses str object
    binary data - uses bytes 


