Notes - November 18, 2014
====================


    Subclassing is not for specialization, it's for reusing code

    The subclass is in charge


    Multiple inheritance - inheriting from more than one class

class Combined(Super1, Super2, Super3):

method resolution order - class order of operations

    is it an instance attribute?
    Is it a class attribute?
    Is it a superclass attribute?

        Is it an attributed of the left-most superclass?
        Next?

Mixins - classes that are designed to add functionality to a class, but can't do much on its own

    animal

        mammal
            givebirth()

        Bird
            layeggs()
    
    Where do you put platypus?
    
    Real world example: FloatCanvas



All of the lcass definitions we've been showing inherit from object

This is referred to as a "new style" class

Always subclass from Object


super(): <--- use it to call a superclass method, rather than explicitly callin the unbound method on the superclass

read manpages on super()

Properties

Attributes are simple and concise

But what if you need to add extra behavior?

class C(object):
    _x = None
    @property
    def x(self):
        return self._x
    @x.setter
    def x(self, value):
        self._x = value

@ <----decoration

Syntax for wrapping up function with special syntax

getters/setters/deleters


Static and Class Methods:

    Static method is a method that doesn't get 'self'
    
    @staticmethod
    def(a,b):
        return a+b


Why are static methods useful? They aren't, usually.

99% of the time you just want a module-level function 

Class Methods

A class method gets the class object, rather than an instance, as the first argument

Why? Unlike static methods, class methods are quite common. They are friendly to subclassing

Properties, Satic Methods, and Class Methods are powerful features of Python's OO model. 

    Descriptor Protocol!

Special Methods! MAgic Methods are the secret sauce to Python's Duck typing. Defining the appropriate special methods in your classes is how you make your classes behave like python Builtins. 

__init__ <---special method

object.__str__ is what happens when you ask for a string version of an object, for example


Protocols

   THe set of special methods needed to emulate a particular type of Python object is called a protocol. 

Your classes can "become" like Python builtins by implementing methods in a given protocol 

    
Use special methods when you want your class to act like a "standard" class in some way. 

Look up the special methods you need and define them

    Guide to Python's Magic Methods

