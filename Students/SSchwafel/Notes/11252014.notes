Notes - Nov 25, 2014

__iadd__

    augmented assignment, used for in-place addition; changes object in place

Making your class behave like builtins!

callable classes

a_result = something(some_arguments) 

    something <---Class

    __call__)*args, **kwargs)

    if you define a __call__ method, that method will be used when code "calls" an instance of your class

Non-built-in sequence classes!

You can create a class that looks like a regular sequence, just add __len__, __getitem_, __setitem__, __delitem__, etc. 


Iterators and generators 

What goes on in for loops?

    iterators are what makes Python so readable

    an_iterator.__iter__()

        returns the iterator object itself

    an_iterator.next()
    
        returns next item until there are none, then returns StopIteration


    What do for loops do?
    
       itertools -> build cool iterators out of sequences you have 



Generators 

    generators give you the iterator immediately
	

    conceptually - iterators are about various ways to loop over data,
    generators generate the data on the fly

    practically - you can use either one either way (and generator is a type of
    iterator

    def a_generator_function(params):
	some_stuff
	yield something


    a function with 'yield' is a factory for a generator

    gen_a = a_generator()
    gen_b a_generator()




